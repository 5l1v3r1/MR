#Pluginname="Google Maps Cache (Android)"
#(c) B.Kerler 2017
#Type=App

from os import walk
import os
import struct
import math
from Library import googlecoord
import tempfile
from PythonQt import QtCore

startheader = [0xFF,0xD8,0xFF,0xE0,0x00,0x10,0x4A,0x46,0x49,0x46,0x00,0x01,0x01,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0xFF,0xDB,0x00,0x43,0x00,0x08,0x06,0x06,0x07,0x06,0x05,0x08,0x07,0x07,0x07,0x09,0x09,0x08,0x0A,0x0C,0x14,0x0D,0x0C,0x0B,0x0B,0x0C,0x19,0x12,0x13,0x0F,0x14,0x1D,0x1A,0x1F,0x1E,0x1D,0x1A,0x1C,0x1C,0x20,0x24,0x2E,0x27,0x20,0x22,0x2C,0x23,0x1C,0x1C,0x28,0x37,0x29,0x2C,0x30,0x31,0x34,0x34,0x34,0x1F,0x27,0x39,0x3D,0x38,0x32,0x3C,0x2E,0x33,0x34,0x32,0xFF,0xDB,0x00,0x43,0x01,0x09,0x09,0x09,0x0C,0x0B,0x0C,0x18,0x0D,0x0D,0x18,0x32,0x21,0x1C,0x21,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0xFF,0xC0,0x00,0x11,0x08,0x00,0x40,0x00,0x40,0x03,0x01,0x22,0x00,0x02,0x11,0x01,0x03,0x11,0x01,0xFF,0xC4,0x00,0x1F,0x00,0x00,0x01,0x05,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0xFF,0xC4,0x00,0xB5,0x10,0x00,0x02,0x01,0x03,0x03,0x02,0x04,0x03,0x05,0x05,0x04,0x04,0x00,0x00,0x01,0x7D,0x01,0x02,0x03,0x00,0x04,0x11,0x05,0x12,0x21,0x31,0x41,0x06,0x13,0x51,0x61,0x07,0x22,0x71,0x14,0x32,0x81,0x91,0xA1,0x08,0x23,0x42,0xB1,0xC1,0x15,0x52,0xD1,0xF0,0x24,0x33,0x62,0x72,0x82,0x09,0x0A,0x16,0x17,0x18,0x19,0x1A,0x25,0x26,0x27,0x28,0x29,0x2A,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFF,0xC4,0x00,0x1F,0x01,0x00,0x03,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0xFF,0xC4,0x00,0xB5,0x11,0x00,0x02,0x01,0x02,0x04,0x04,0x03,0x04,0x07,0x05,0x04,0x04,0x00,0x01,0x02,0x77,0x00,0x01,0x02,0x03,0x11,0x04,0x05,0x21,0x31,0x06,0x12,0x41,0x51,0x07,0x61,0x71,0x13,0x22,0x32,0x81,0x08,0x14,0x42,0x91,0xA1,0xB1,0xC1,0x09,0x23,0x33,0x52,0xF0,0x15,0x62,0x72,0xD1,0x0A,0x16,0x24,0x34,0xE1,0x25,0xF1,0x17,0x18,0x19,0x1A,0x26,0x27,0x28,0x29,0x2A,0x35,0x36,0x37,0x38,0x39,0x3A,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFF,0xDA,0x00,0x0C,0x03,0x01,0x00,0x02,0x11,0x03,0x11,0x00,0x3F,0x00]
jpeg_header = [[0x10, 0xB, 0xC, 0xE, 0xC, 0xA, 0x10, 0xE, 0xD, 0xE, 0x12, 0x11, 0x10, 0x13, 0x18, 0x28, 0x1A, 0x18, 0x16, 0x16, 0x18, 0x31, 0x23, 0x25, 0x1D, 0x28, 0x3A, 0x33, 0x3D, 0x3C, 0x39, 0x33, 0x38, 0x37, 0x40, 0x48, 0x5C, 0x4E, 0x40, 0x44, 0x57, 0x45, 0x37, 0x38, 0x50, 0x6D, 0x51, 0x57, 0x5F, 0x62, 0x67, 0x68, 0x67, 0x3E, 0x4D, 0x71, 0x79, 0x70, 0x64, 0x78, 0x5C, 0x65, 0x67, 0x63], [0x11, 0x12, 0x12, 0x18, 0x15, 0x18, 0x2F, 0x1A, 0x1A, 0x2F, 0x63, 0x42, 0x38, 0x42, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63]]
b = [0xFFFFFFFF, 0x64000001, 0x32000001, 0x21555581, 0x19000001, 0x14000001, 0x10AAAAC1, 0xE492491, 0xC800001, 0xB1C71C1, 0xA000001, 0x91745D1, 0x8555561, 0x7B13B19, 0x7249249, 0x6AAAAA9, 0x6400001, 0x5E1E1E1, 0x58E38E1, 0x5435E51, 0x5000001, 0x4C30C31, 0x48BA2E9, 0x4590B21, 0x42AAAB1, 0x4000001, 0x3D89D8D, 0x3B425ED, 0x3924925, 0x372C239, 0x3555555, 0x339CE75, 0x3200001, 0x307C1F1, 0x2F0F0F1, 0x2DB6DB9, 0x2C71C71, 0x2B3E455, 0x2A1AF29, 0x2906909, 0x2800001, 0x27063E9, 0x2618619, 0x253594D, 0x245D175, 0x238E391, 0x22C8591, 0x220AE4D, 0x2155559, 0x20A72F1, 0x2000001, 0x1F5C291, 0x1EB8521, 0x1E147B1, 0x1D70A3D, 0x1CCCCCD, 0x1C28F5D, 0x1B851ED, 0x1AE147D, 0x1A3D70D, 0x1999999, 0x18F5C29, 0x1851EB9, 0x17AE149, 0x170A3D9, 0x1666669, 0x15C28F5, 0x151EB85, 0x147AE15, 0x13D70A5, 0x1333335, 0x128F5C5, 0x11EB851, 0x1147AE1, 0x10A3D71, 0x1000001, 0xF5C291, 0xEB8521, 0xE147B1, 0xD70A3D, 0xCCCCCD, 0xC28F5D, 0xB851ED, 0xAE147D, 0xA3D70D, 0x999999, 0x8F5C29, 0x851EB9, 0x7AE149, 0x70A3D9, 0x666669, 0x5C28F5, 0x51EB85, 0x47AE15, 0x3D70A5, 0x333335, 0x28F5C5, 0x1EB851, 0x147AE1, 0xA3D71, 1]

def arraycopy (src, srcpos, dst, dstpos, slen):
    if dstpos >= len(dst):
        for a in range(0,slen):
            dst.append(src[srcpos+a])
    else:
        for a in range(0,slen):
            #dst[dstpos+a]=src[srcpos+a]
            dst.insert(dstpos+a,src[srcpos+a])
    return dst

def qualityalgo (arg7, arg8, arg9):
        v0=0
        v3 = 0x1388
        v2 = 0xFF
        if (arg9==0):
            if(arg7 == 0x63 and arg8 == 0x24):
                    v0 = 0x8A
                    if (v0 < 1):
                        v0 = 1
                    elif (v0 > v2):
                        v0 = v2
                    return v0

            a=(arg7 * b[arg8] / 0x1000000 + 1)
            v0 = int(a / 2)
        elif (arg9==1):
            if arg8 < 0x32:
                v0=math.min(int(v3) / arg8, v3)
            else:
                v0=math.max(int(0xC8) - arg8 * 2, 0)
            v0 = (v0 * arg7 + 0x32) / 0x64
        else:
            print ("qualityAlgorithm")
            return 0

        if (v0 < 1):
            v0 = 1
        elif (v0 > v2):
            v0 = v2
        return (v0&0xFF)

def gethdr(arg6, arg7, arg8):
        hdr=[]
        len = 0x40;
        i = 0x40;
        try:
            headerdata = jpeg_header[arg6]
            for i in range(0,len):
                hdr.append(qualityalgo(headerdata[i] & 0xFF, arg7, arg8))
            return hdr
        except:
            return []

def gensubhdr(arg3, arg4, arg5, arg6, arg7):
        v0 = gethdr(arg5, arg6, arg7)
        return arraycopy(v0, 0, arg3, arg4, len(v0))

def generatejpg_sub2(dst, dstlen, arg8, arg9, arg10, arg11, arg12):
        if(arg8 != 0):
            return []

        if  (arg11 >= 0x18 and arg11 <= 0x64):
            if  (arg12 != 0 and arg12 != 1):
                print("qualityAlgorithm: " % arg12)
                return []

            v0 = len(startheader)
            if (dstlen + v0 > len(dst)):
                print("dest")
                return []

            dst=arraycopy(startheader, 0, dst, dstlen, v0)

            v1 = dstlen + 0xA3
            dst[v1] = ((arg9 >> 8)&0xFF)
            dst[v1 + 1] = (arg9 & 0xFF)
            dst[v1 + 2] = ((arg10 >> 8)&0xFF)
            dst[v1 + 3] = (arg10 & 0xFF)
            if(arg11 != 0x4B):
                dst=gensubhdr(dst, dstlen + 0x19, 0, arg11, arg12)
                dst=gensubhdr(dst, dstlen + 0x5E, 1, arg11, arg12)

            return dst

        print("quality")
        return []

def verifyvariant(arg3):
    if(arg3 != 0):
        return 0
    return len(startheader)

def generatejpg(src, srcpos, srclen, dest, destpos, a, b, c, d, e):
        if (a != 0):
            return b''
            #throw new IllegalArgumentException("variant");
        pos=verifyvariant(a) + destpos
        # System.arraycopy(src, srcpos, dest, realjpegstart.verifyvariant(variant) + destpos, srclen)
        dest=arraycopy(src,srcpos,dest,verifyvariant(a) + destpos,srclen)
        dest=generatejpg_sub2(dest, destpos, a, b, c, d, e)
        return dest

def converttojpeg_sub(data, val0, datalen):
        v0=0
        realjpegstart_len=0
        if(data[val0] != 0xFFFFFFFF or data[val0 + 1] != 0xFFFFFFD8):
            if(data[val0] == 0x43 and data[val0 + 1] == 0x4A and data[val0 + 2] == 0x50 and data[val0 + 3] == 0x47):
                a = int(data[val0 + 4] & 0xFF)
                b = int(data[val0 + 6] & 0xFF) | int(data[val0 + 5] & 0xFF) << 8
                c = int(data[val0 + 8] & 0xFF) | int(data[val0 + 7] & 0xFF) << 8
                d = int(data[val0 + 9] & 0xFF)
                e = int(data[val0 + 0xA] & 0xFF)
                try:
                    realjpegstart_len = verifyvariant(a);
                except:
                    print("Unknown variant %d" % a)

                result = []
                result=generatejpg(data, val0 + 0xB, datalen - 0xB, result, 0, a, b, c ,d ,e)
                return bytearray(result)
            else:
                return bytearray(data[val0:val0+datalen])
        else:
            return []
            #System.arraycopy(data, val0, v0, 0, datalen);

def getcomplen(file):
    x = int(struct.unpack("B",file.read(1))[0])
    i = 0
    if (x >= 0x80):
        i = int(struct.unpack("B",file.read(1))[0])
        x = x & 0x7F | (i & 0x7F) << 7
        if (i >= 0x80):
            i = int(struct.unpack("B",file.read(1))[0])
            x |= (i & 0x7F) << 0xE
            if (i >= 0x80):
                i = int(struct.unpack("B",file.read(1))[0])
                x |= (i & 0x7F) << 0x15
                if (i >= 0x80):
                    i = int(struct.unpack("B",file.read(1))[0])
                    x |= (i & 0x7F) << 0x1C
                    if (i < 0x80):
                        return x
                    while (i >= 0x80):
                        i = int(struct.unpack("B",file.read(1))[0])
    return x
   

def main():
    headers=["id (int)","Latitude (QString)", "Longitude (QString)","timestamp (int)","image (QByteArray)","Filename (QString)"]
    ctx.gui_set_headers(headers)
    ctx.gui_setMainProgressBar(0)
    ctx.gui_setMainLabel("Status: Converting maps cache")
    filenames=ctx.pluginfilenames()
    for fsname in filenames:
        filename=tempfile.gettempdir()+"/"+fsname[fsname.rfind("/")+1:]
        if (fsname[-2:]!=".m"):
            if ctx.fs_file_extract(fsname,filename):
                with open(filename,"rb") as rb:
                    counter=0
                    while True:
                        rb.seek(0x5,1)
                        buf=rb.read(0x8)
                        if not buf:
                            break
                        timestamp=(int(struct.unpack(">Q",buf)[0])/1000)-2592000
                        rb.seek(0x10,1)
                        buf=rb.read(4)
                        if not buf:
                            break
                        magic=struct.unpack("<I",buf)[0]
                        if (magic == 0x54415244): #DRAT
                            version = getcomplen(rb)
                            zoom = getcomplen(rb)
                            x = getcomplen(rb)
                            y = getcomplen(rb)
                            coord=googlecoord.getcoord(x,y,zoom)
                            latstr=coord[0]
                            lonstr=coord[1]
                            unknown = getcomplen(rb)
                            imgwidth = getcomplen(rb)
                            imgheight = getcomplen(rb)
                            imglen = getcomplen(rb)
                            imgdata = rb.read(imglen)
                            jpg=converttojpeg_sub(imgdata,0,imglen)
                            ctx.gui_set_data(counter,0,counter)
                            ctx.gui_set_data(counter,1,latstr)
                            ctx.gui_set_data(counter,2,lonstr)
                            ctx.gui_set_data(counter,3,int(timestamp))
                            ctx.gui_set_data(counter,4,QtCore.QByteArray(bytes(jpg)))
                            ctx.gui_set_data(counter,5,fsname)
                            counter+=1
                        else:
                            break
                os.remove(filename)
    ctx.gui_update()
    ctx.gui_setMainLabel("Status: Idle.")
    ctx.gui_setMainProgressBar(0)
    return "Finished running plugin."